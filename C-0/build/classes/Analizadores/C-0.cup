package Analizadores;

import java_cup.runtime.*;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Vector;
import java.io.IOException;
import java.lang.Math;


//Requerimientos de CUP
parser code {:
    static TablaSimbolos ts;
    static CodigoIntermedio codigoIntermedio;
    static String ficheroCodigoIntermedio=null;
    static String codFuente;
	static int cuentaWhiles;
	
    public void error(String mensaje) {
        System.out.println("ERROR lin:"+InformacionCodigo.linea+
        " tok:"+InformacionCodigo.token+" => "+mensaje);
    }

    public static void inicializar() throws IOException {
        ts = new TablaSimbolos();
        codigoIntermedio = new CodigoIntermedio(ficheroCodigoIntermedio);
        codigoIntermedio.abrirFicheroEscritura();
    }

    public static void main(String args[]) throws Exception {
        if (args.length != 1) {
            System.out.println("Falta fichero");
        } else {
            try {
                Yylex lexico = new Yylex(new FileReader(args[0]));
                String name = (String) args[0];
                codFuente = name.substring(0, name.lastIndexOf("."));
                ficheroCodigoIntermedio = codFuente + ".log";
                inicializar();
                new parser(lexico).parse();
            } catch (FileNotFoundException e1) {
                System.out.println("Fichero no abierto");
            }
        }
    }

    boolean existeSimbolo(String id) {  
		return ts.existe(id);
    }
    void addSimbolo(String id) {
		ts.insertarSimbolo(id);
    }
    
    public void report_error(String message, Object info) {
        error(message);
    } 
 
    public void syntax_error(Symbol actual) {
        error("Error SINTACTICO");
    } 

    public void report_fatal_error(String message, Object info) {
        error(message);
    } 
 
    public void unrecovered_syntax_error(Symbol actual) {
    } 
:};

//---------------------------------Terminales-------------------------------------------------------------------------

terminal PTOCOMA;
terminal LPAREN;
terminal RPAREN;
terminal PRODUCTO;
terminal SUMA;
terminal DIVISION;
terminal RESTA;
terminal MENOR;
terminal MAYOR;
terminal IGUAL;
terminal DISTINTO;
terminal OR;
terminal AND;
terminal ASIGNAR;
terminal LLLAVE, RLLAVE;

terminal MAIN;
terminal IF;
terminal WHILE;
terminal ELSE;
terminal PUTW;
terminal PUTS;
terminal INT;
terminal BREAK;
terminal NUMERO;

terminal String ID;
terminal int ENTERO;
terminal String CADENATEXTO;

//---------------------------------NO Terminales-------------------------------------------------------------------------

non terminal Programa, Declaraciones, Cuerpo;
non terminal Declaracion;
non terminal BloqueSentencias;
non terminal Sentencias, Sentencia;
non terminal Expresion;
non terminal Condicion;
non terminal SentIf, SentElse;
non terminal SentWhile;
non terminal SentAsignacion;
non terminal SentPutw, SentPuts;
non terminal SentBreak;


//Precedencias
precedence left ASIGNAR;
precedence left OR, AND;
precedence left IGUAL, DISTINTO, MAYOR, MENOR;     
precedence left SUMA, RESTA;
precedence left PRODUCTO, DIVISION;
precedence left LPAREN, RPAREN;


//Gram√°tica
start with Programa;  //A

Programa::= {:
			inicializar();
		 :}
                Declaraciones Cuerpo | Cuerpo;  //A

Declaraciones::= Declaracion Declaraciones | Declaracion;

Declaracion ::= INT ID:id PTOCOMA
			{:
                                
				if(existeSimbolo(id)) {
					parser.error(Texto.simboloRedeclarado);
				} else {
					addSimbolo(id);
					
				}
			:}
		    ;

Cuerpo::= MAIN LPAREN RPAREN LLLAVE BloqueSentencias RLLAVE;

BloqueSentencias::= Sentencias | ;

Sentencias::= Sentencia Sentencias | Sentencia;

Expresion ::= Expresion:e1 SUMA Expresion:e2 
			{:
				
			:}
              |
		  Expresion:e1 RESTA Expresion:e2
                        {:
				
			:}
			
		  |
              Expresion:e1 PRODUCTO Expresion:e2 
			{:
				
			:}
		  |
		  Expresion:e1 DIVISION Expresion:e2 
			{:
				
			:}
		  |
		  ENTERO
			{:
				
			:}
		  |
		  ID:id 
			{:
				
			:}
		  |
	   	  LPAREN Expresion:e RPAREN 
			{:
				
			:}
		  ;

Condicion ::= Condicion:c1 OR Condicion:c2 
			{:
				
			:}
	        |
		  Condicion:c1 AND Condicion:c2 
			{:
				
			:}
		  |
      	  Expresion:e1 IGUAL Expresion:e2 
			{:
				
			:}
		  |
		  Expresion:e1 DISTINTO Expresion:e2 
			{:
				
			:}
		  |
		  Expresion:e1 MAYOR Expresion:e2 
			{:
				
			:}
		  |
		  Expresion:e1 MENOR Expresion:e2 
			{:
				
			:}
		  |
		  LPAREN Condicion:c RPAREN
			{:
				
			:}
              ;

SentIf ::= IF LPAREN 
			{:
				
			:}
           Condicion:c 
			{:
				
			:}
	     RPAREN LLLAVE BloqueSentencias RLLAVE 
			{:
				
			:}
	     SentElse
			{:
				
			:}
           ;

SentElse ::= ELSE LLLAVE BloqueSentencias RLLAVE |;

SentWhile ::= WHILE LPAREN 
			{:
				
			:}
		  Condicion:c
			{:
				
			:} 
		  RPAREN LLLAVE 
			{:
				
			:}
		  BloqueSentencias 
			{:
				
			:}
		  RLLAVE
			{:
				
			:}
		  ;

SentAsignacion::= ID:id ASIGNAR Expresion:e PTOCOMA {:System.out.println(id);:};

SentPutw ::= PUTW LPAREN Expresion:e 
			{:
				
			:}
	       RPAREN PTOCOMA;

SentPuts::= PUTS LPAREN CADENATEXTO:c {:
				
			:} RPAREN PTOCOMA;

SentBreak ::= BREAK 
			{:
			
			:}
		  PTOCOMA;

Sentencia ::= SentIf |
		  SentWhile |
		  SentAsignacion |
		  SentPutw |
		  SentPuts |
		  SentBreak;
